#!/bin/bash

#####################
# Dependencies

# requirements for Homebrew
printf "Installing xcode...\n"
xcode-select --install | echo "xcode-installed"


# Dont install if brew already exists
if ! exists brew; then
    printf "Installing homebrew...\n"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
else
    printf "Homebrew already installed!\n"
fi

# Install required programs via Homebrew
taps=""
brews="zsh fzf ripgrep tmux neovim python3 node php composer mplayer htop tree"
casks="kitty hammerspoon visual-studio-code firefox keeweb harvest rambox usb-overdrive windscribe slack"


for tap in $taps; do
    if brew tap | grep "$tap" > /dev/null; then
        printf "$tap already tapped! \n"
    else
        printf "Tapping $tap\n"
        brew tap $tarp > /dev/null
    fi
done

for brew in $brews; do
    if brew list | grep "$brew" > /dev/null; then
        printf "$brew already installed \n"
    else
        printf "Installing $brew\n"
        brew install $brew > /dev/null
    fi
done

# Install ctags (they dont have official tap)
brew install --HEAD universal-ctags/universal-ctags/universal-ctags

for cask in $casks; do
    if brew cask list | grep "$cask" > /dev/null; then
        printf "$cask already installed \n"
    else 
        printf "Installing $cask\n"
        brew cask install $cask > /dev/null
    fi
done

# Install neovim dependencies
if ! pip3 show neovim > /dev/null; then
    pip3 install neovim > /dev/null
    printf "Installing python neovim dependencies\n"
else
    printf "Python neovim dependencies already installed\n"
fi


#####################
# SYMLINKS

# bashrc
printf "Linking .bashrc, .bash_profile\n"
ln -sf $dotfiles_dir/shell/bashrc $HOME/.bashrc
ln -sf $dotfiles_dir/shell/bash_profile $HOME/.bash_profile
ln -sf $dotfiles_dir/shell/dircolors $HOME/.dircolors

# zshrc
printf "Linking .zshrc\n"
ln -sf $dotfiles_dir/shell/zshrc $HOME/.zshrc

# Install oh-my-zsh, if it exists just do git pull
if [ -d $config_dir/oh-my-zsh ]; then
    printf "Updating oh-my-zsh...\n"
    cd $config_dir/oh-my-zsh 
    git pull $config_dir/oh-my-zsh > /dev/null
else 
    printf "Installing oh-my-zsh...\n"
    git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.config/oh-my-zsh > /dev/null
fi

# tmux
echo "Linking tmux.conf"
ln -sf $dotfiles_dir/tmux/tmux.conf $HOME/.tmux.conf

# vim
printf "Linking vimrc\n"

if [ ! -d $config_dir/nvim ]; then
    mkdir -p $config_dir/nvim
fi
ln -sf $dotfiles_dir/vim/vimrc $HOME/.config/nvim/init.vim
ln -sf $dotfiles_dir/vim/vimrc $HOME/.vimrc

printf "Linking ctags\n"
ln -sf $dotfiles_dir/vim/ctags $HOME/.ctags


# git
printf "Linking gitconfig\n"
ln -sf $dotfiles_dir/git/gitconfig $HOME/.gitconfig



printf "Linking hammerspoon config\n"
if [ -d $HOME/.hammerspoon ] || [ -h $HOME/.hammerspoon ]; then
    rm -rf $HOME/.hammerspoon
fi
ln -sf $dotfiles_dir/hammerspoon $HOME/.hammerspoon


# bin files
dotfiles_dir=$HOME/.dotfiles
target_bin=$HOME/.local/bin

echo "Checking if $target_bin exists..."
if [[ -d $target_bin ]]; then
    echo "$target_bin, exists!"
else
    echo "$target_bin not found, creating directory"
    mkdir -p $target_bin
fi

# Link files to target bin
echo "Linking bin"
for file_path in $dotfiles_dir/bin/*; do
    filename=$(basename $file_path)

    # Make the actual link
    ln -sf $file_path $target_bin
done


#####################
# OTHER

#Install vim plugins automatically
bash -c "nvim  +PlugInstall +qall"

# Change default shell to zsh
if [[ $(echo $SHELL) =~ .*zsh.* ]]; then
    printf  "Changing default shell to zsh\n"
    sudo sh -c "echo $(which zsh) >> /etc/shells"
    chsh -s $(which zsh)
else
    printf "zsh already default shell\n"
fi
