#!/bin/bash
latest_version=$($HOME/.dotfiles/bin/get-latest-release-tag neovim/neovim)

base_dir=$HOME/.dotfiles/tools/neovim-$latest_version
dotfiles_dir=$HOME/.dotfiles

if [ -e $base_dir ] && [ -h $HOME/.local/bin/nvim ]; then
    echo "Neovim already up to date"
    
else
    if [ -e $base_dir ];then
        rm -rf $base_dir
    fi

    mkdir $base_dir
    cd $base_dir

    # OSX INSTALL
    if [[ "$(uname)" == 'Darwin' ]]; then
        target_url=https://github.com/neovim/neovim/releases/download/$latest_version/nvim-macos.tar.gz
        tar_package=nvim-macos.tar.gz

        if [ -x $(command -v brew) ]; then
            echo "Checking if python is installed..."
            command -v python >/dev/null 2>&1 || { echo >&2 "Python installation was not found. Installing..."; brew install python; }
            pip install neovim; 

            echo "Downloading neovim (tar-package) for OSX..."
            curl -OL $target_url
                
            echo "Extracting..."
            # tar -xvf $tar_package
            # Extracting tar package, to -C 'direcotry' and stripping additional root folders
            mkdir -p $base_dir/neovim && tar -xvf $tar_package -C $base_dir/neovim --strip-components=1

            # Make sure that .local/bin exists
            if [ ! -d $HOME/.local/bin ]; then
                mkdir -p $HOME/.local/bin
            fi


            # Link new binary
            ln -sf $base_dir/neovim/bin/nvim $HOME/.local/bin/nvim

            # Remove tar file
            rm $tar_package
            echo "Neovim installed!"
        else
            echo "Neovim needs python3 support. Please install homebrew so we can install python."
        fi

    # LINUX INSTALL
    else
        target_url=https://github.com/neovim/neovim/releases/download/$latest_version/nvim.appimage

        command -v python3 >/dev/null 2>&1 || { echo >&2 "Python installation was not found. Installing..."; sudo apt install python -y; }
        command -v pip3 >/dev/null 2>&1 || { echo >&2 "Pip was not found. Installing..."; sudo apt install python3-pip -y; }
        sudo pip3 install neovim
        # ln -s $(which python3) $HOME/.local/bin/py3

        # download appimage
        echo "Downloading neovim (appimage) for linux..."
        curl -OL $target_url


        # Make sure that .local/bin exists
        if [ ! -d $HOME/.local/bin ]; then
            mkdir -p $HOME/.local/bin
        else
            # Remove previous symlink
            if [ -h $HOME/.local/bin/nvim ]; then
                rm $HOME/.local/bin/nvim
            fi
        fi

        # Link new appimage
        chmod 772 $base_dir/nvim.appimage
        ln -s $base_dir/nvim.appimage $HOME/.local/bin/nvim
        echo "Neovim installed!"

    fi

    # LINKING 

    echo "Linking vimrc to $HOME and $HOME/.config/nvim/"

    # neovim
    if [ ! -d $HOME/.config/nvim ]; then
	mkdir -p $HOME/.config/nvim
    else
	if [ -e $HOME/.config/nvim/init.vim ]; then
	    echo "Deleting old init.vim"
	    rm  $HOME/.config/nvim/init.vim
        fi
    fi

    echo "Creating symlink to vimrc in $HOME" 
    ln -s $dotfiles_dir/vim/vimrc $HOME/.config/nvim/init.vim

    if [ -e $HOME/.vimrc ] || [ -h $HOME/.vimrc ]; then
        echo "Deleting old init.vim"
        rm  $HOME/.vimrc
    fi
    ln -s $dotfiles_dir/vim/vimrc $HOME/.vimrc


    echo "Linking ctags and tern-config to $hOME"
    if [ -h $HOME/.ctags ] || [ -e $HOME/.ctags ]; then
	rm $HOME/.ctags
    fi
    ln -s $dotfiles_dir/vim/ctags $HOME/.ctags


    echo "Linking ctags and tern-config to $hOME"
    if [ -h $HOME/.tern-config ] || [ -e $HOME/.tern-config ]; then
	rm $HOME/.tern-config
    fi
    ln -s $dotfiles_dir/vim/tern-config $HOME/.tern-config

    #Update submodule (Vundle) so that Vim recognises it
    git submodule update --init --recursive
    #Install plugins automatically
    $HOME/.local/bin/nvim  +PluginInstall +qall

    # Remove old versions
    old_versions=$HOME/.dotfiles/tools/neovim*
    for version in $old_versions; do
        if [ "$(basename $version)" != "neovim-$latest_version" ]; then
            rm -rf $version
        fi
    done
fi



