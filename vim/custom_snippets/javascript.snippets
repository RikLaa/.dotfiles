snippet const
const ${1} = ${2};
endsnippet


snippet let
let ${1} = ${2};
endsnippet

snippet action
export const ${1} = ns('$1');
export const ${2} = (${3}) => fsa($1${4:});
endsnippet

snippet sagawatch
function* $4(${5}) {
  try {
	${6}
  }
  catch (e) {
    console.warn(e);
  }
}

function* ${1}() {
  yield ${2}(${3}, ${4});
}
endsnippet

snippet cl
console.log(${1})
endsnippet

snippet im "import xyz from 'xyz'"
import ${1} from '${2:$1}';
endsnippet

# React
snippet ir
import React from 'react';
endsnippet

snippet irc
import React, {Component} from 'react';
endsnippet

snippet con
constructor(props) {
 super(props);
 ${1}
}

endsnippet

snippet cdm
componentDidMount() {
	${1}
}
endsnippet

snippet cdup
componentDidUpdate(prevProps, prevState) {
	${1}
}
endsnippet

snippet cwm
componentWillMount() {
	${1}
}
endsnippet

snippet cwr
componentWillReceiveProps(nextProps) {
	${1}
}
endsnippet

snippet cwum
componentWillUnmount() {
	${1}
}
endsnippet

snippet cwu
componentWillUpdate(nextProps, nextState) {
	${1}
}
endsnippet


snippet dp
static defaultProps = {
	${1}: ${2},
}
endsnippet

snippet st
state = {
	${1}: ${2},
}
endsnippet

snippet pt
static propTypes = {
	${1}: React.PropTypes.${2:type},
}
endsnippet

snippet rcc
class ${1:ClassName} extends React.Component {
	render() {
		return (
			${0:<div />}
		);
	}
}
endsnippet


snippet ren
render() {
	return (
		${1:<div />}
	);
}
endsnippet

snippet sst
this.setState({
	${1}: ${2}
});
endsnippet

snippet cn
className="${1}"
endsnippet

snippet esl
/* eslint ${1}: ${2:0} */
endsnippet

snippet for
for (var i = ${1}; i < ${2}; i++) {
${3}
}
endsnippet

snippet while
while (${1}) {
${2}
}
endsnippet
